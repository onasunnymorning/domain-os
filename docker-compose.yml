services:
# Database container
  db:
    image: postgres:16.1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key

    # expose:
    #   - 5432
    ports:
      - 5432:5432
      - 55432:55432
    networks:
      - regos
    volumes: 
      - db:/var/lib/postgresql/data 

# Zookeeper conatainer
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - regos

# Kafka container
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - regos

# Event Consumer
  event-consumer:
    image: "geapex/consumer:${BRANCH}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      admin-api:
        condition: service_healthy
    networks:
      - regos

# Core API container
  admin-api:
    image: "geapex/domain-os:${BRANCH}"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ping || exit"]
      interval: 3s
      retries: 5
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ENV=${ENV}
      - GIN_MODE=${GIN_MODE}
      - OPENEXCHANGERATES_APP_ID=${OPENEXCHANGERATES_APP_ID}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - API_PORT=${API_PORT}
      - API_HOST=${API_HOST}
      - API_VERSION=${API_VERSION}
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - regos

networks:
  regos:
    driver: bridge

volumes:
  db:
    driver: local