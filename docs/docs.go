// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "APEX all rights reserved"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/contacts": {
            "get": {
                "description": "List contacts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contacts"
                ],
                "summary": "List contacts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Contact"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contacts"
                ],
                "summary": "Create a contact",
                "parameters": [
                    {
                        "description": "Contact",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commands.CreateContactCommand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/contacts/:id": {
            "put": {
                "description": "Update a contact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contacts"
                ],
                "summary": "Update a contact",
                "parameters": [
                    {
                        "description": "Contact",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/contacts/{id}": {
            "get": {
                "description": "Get a contact by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contacts"
                ],
                "summary": "Get a contact by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Contact"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a contact by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contacts"
                ],
                "summary": "Delete a contact by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ianaregistrars": {
            "get": {
                "description": "List IANARegistrars from our internal repository. If you need to update the IANA registrar list, please use the /sync endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IANARegistrars"
                ],
                "summary": "List IANARegistrars",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name Like (case insensitive search on name)",
                        "name": "name_like",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status ('Terminated', 'Reserved', 'Accredited')",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.IANARegistrar"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ianaregistrars/{gurID}": {
            "get": {
                "description": "Get IANARegistrar by GurID from our internal repository.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "IANARegistrars"
                ],
                "summary": "Get IANARegistrar by GurID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GurID",
                        "name": "gurID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.IANARegistrar"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nndns": {
            "get": {
                "description": "List NNDNs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NNDNs"
                ],
                "summary": "List NNDNs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ListItemResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create NNDN",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NNDNs"
                ],
                "summary": "Create NNDN",
                "parameters": [
                    {
                        "description": "NNDN",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateNNDNRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.NNDN"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/nndns/{name}": {
            "get": {
                "description": "Get NNDN by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NNDNs"
                ],
                "summary": "Get NNDN by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NNDN name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.NNDN"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete NNDN by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NNDNs"
                ],
                "summary": "Delete NNDN by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NNDN name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/registrars": {
            "get": {
                "description": "List Registrars.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registrars"
                ],
                "summary": "List Registrars",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Registrar"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new Registrar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registrars"
                ],
                "summary": "Create a new Registrar",
                "parameters": [
                    {
                        "description": "Registrar",
                        "name": "registrar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commands.CreateRegistrarCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commands.CreateRegistrarCommandResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/registrars/gurid/{gurid}": {
            "post": {
                "description": "Creates a registrar by looking up the GurID in the IANA repository and taking the data from there. You will need to supply an email only. All the other data will be taken from the IANA repository.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registrars"
                ],
                "summary": "Create a new Registrar by GurID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Registrar GurID",
                        "name": "gurid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "RegistrarEmail",
                        "name": "registrarEmail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateRegistrarFromGurIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commands.CreateRegistrarCommandResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/registrars/{clid}": {
            "get": {
                "description": "Get a Registrar by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registrars"
                ],
                "summary": "Get a Registrar by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registrar Client ID",
                        "name": "clid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Registrar"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a Registrar by ClID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registrars"
                ],
                "summary": "Delete a Registrar by ClID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registrar Client ID",
                        "name": "clid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/spec5labels": {
            "get": {
                "description": "List Spec5 labels from our internal repository. If you need to update the Spec5 label list, please use the /sync endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spec5Labels"
                ],
                "summary": "List Spec5 labels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Spec5Label"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/sync/iana-registrars": {
            "put": {
                "description": "Reads in the registrars from IANA XML repository (https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml) and refreshes the database.\nThis will replace all IANARegistrars in the database. Its recommended to first backup the current IANARegistrars.\nUse this endpoint when there is an update to the IANA registrar list or you are notified by ICANN of a termination of a registrar.\nExpect this endpoint to be slow, as it downloads and processes the XML file from another server and then updates the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sync"
                ],
                "summary": "Sync Registrars from IANA to the database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.SyncResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/sync/icann-spec5": {
            "put": {
                "description": "Reads in the spec5 labels from ICANN XML repository (https://www.icann.org/sites/default/files/packages/reserved-names/ReservedNames.xml) and refreshes the database.\nThis will replace all spec5Labels in the database. Its recommended to first backup the current spec5Labels.\nUse this endpoint when there is an update to the spec5 policy by ICANN. See this webpage for reference (https://www.icann.org/reserved-names-en).\nExpect this endpoint to be slow, as it downloads and processes the XML file from another server and then updates the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sync"
                ],
                "summary": "Sync Spec5 labels from ICANN to the database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.SyncResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/tlds": {
            "get": {
                "description": "List TLDs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TLDs"
                ],
                "summary": "List TLDs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pagesize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.TLD"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new TLD",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TLDs"
                ],
                "summary": "Create a new TLD",
                "parameters": [
                    {
                        "description": "TLD",
                        "name": "registrar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commands.CreateTLDCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commands.CreateTLDCommandResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/tlds/{name}": {
            "get": {
                "description": "Get a TLD by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TLDs"
                ],
                "summary": "Get a TLD by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TLD Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.TLD"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a TLD by Name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TLDs"
                ],
                "summary": "Delete a TLD by Name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TLD Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "commands.CreateContactCommand": {
            "type": "object",
            "required": [
                "AuthInfo",
                "ClID",
                "Email",
                "ID",
                "PostalInfo"
            ],
            "properties": {
                "AuthInfo": {
                    "type": "string"
                },
                "ClID": {
                    "type": "string"
                },
                "CrRr": {
                    "type": "string"
                },
                "Disclose": {
                    "$ref": "#/definitions/entities.ContactDisclose"
                },
                "Email": {
                    "type": "string"
                },
                "Fax": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "PostalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.ContactPostalInfo"
                    }
                },
                "RoID": {
                    "description": "If not provided, one will be generated. Allowing it to be specified allows import of escrow contacts without changing the ID",
                    "type": "string"
                },
                "Status": {
                    "$ref": "#/definitions/entities.ContactStatus"
                },
                "UpRr": {
                    "type": "string"
                },
                "Voice": {
                    "type": "string"
                }
            }
        },
        "commands.CreateRegistrarCommand": {
            "type": "object",
            "required": [
                "ClID",
                "Email",
                "Name",
                "PostalInfo"
            ],
            "properties": {
                "ClID": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Fax": {
                    "type": "string"
                },
                "GurID": {
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "PostalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.RegistrarPostalInfo"
                    }
                },
                "RdapBaseURL": {
                    "type": "string"
                },
                "URL": {
                    "type": "string"
                },
                "Voice": {
                    "type": "string"
                },
                "WhoisInfo": {
                    "$ref": "#/definitions/entities.WhoisInfo"
                }
            }
        },
        "commands.CreateRegistrarCommandResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/entities.Registrar"
                }
            }
        },
        "commands.CreateTLDCommand": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "commands.CreateTLDCommandResult": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/commands.TLDResult"
                }
            }
        },
        "commands.TLDResult": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uname": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entities.Address": {
            "type": "object",
            "required": [
                "CC",
                "City"
            ],
            "properties": {
                "Street1": {
                    "type": "string",
                    "x-order": "0",
                    "example": "Boulnes 2545"
                },
                "Street2": {
                    "type": "string",
                    "x-order": "1",
                    "example": "Piso8"
                },
                "Street3": {
                    "type": "string",
                    "x-order": "2",
                    "example": "Portero"
                },
                "City": {
                    "type": "string",
                    "x-order": "3",
                    "example": "Buenos Aires"
                },
                "SP": {
                    "type": "string",
                    "x-order": "4",
                    "example": "Palermo SOHO"
                },
                "PC": {
                    "type": "string",
                    "x-order": "5",
                    "example": "EN234Z"
                },
                "CC": {
                    "type": "string",
                    "x-order": "6",
                    "example": "AR"
                }
            }
        },
        "entities.Contact": {
            "type": "object",
            "properties": {
                "ID": {
                    "description": "The contact identifier as supplied by the registrar, this should be used by all references to the contact",
                    "type": "string",
                    "x-order": "0",
                    "example": "sh8013"
                },
                "RoID": {
                    "description": "The generated id for the contact, has to be unique within the registry",
                    "type": "string",
                    "x-order": "1",
                    "example": "1729468286778740736_CONT-APEX"
                },
                "AuthInfo": {
                    "description": "Required",
                    "type": "string",
                    "example": "sTr0N5p@zzWqRD"
                },
                "ClID": {
                    "description": "Required",
                    "type": "string",
                    "example": "sh8013"
                },
                "ClientDeleteProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ClientTransferProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ClientUpdatProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "CrDate": {
                    "type": "string",
                    "example": "2023-04-03T22:00:00.0Z"
                },
                "CrRr": {
                    "type": "string",
                    "example": "sh8013"
                },
                "DiscloseAddrInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseAddrLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseEmail": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseFax": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseNameInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseNameLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseOrgInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseOrgLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseVoice": {
                    "type": "boolean",
                    "example": false
                },
                "Email": {
                    "description": "Required",
                    "type": "string",
                    "example": "solutions@apex.domains"
                },
                "Fax": {
                    "type": "string",
                    "example": "+1.9567345623"
                },
                "Linked": {
                    "type": "boolean",
                    "example": true
                },
                "OK": {
                    "type": "boolean",
                    "example": true
                },
                "PendingCreate": {
                    "type": "boolean",
                    "example": false
                },
                "PendingDelete": {
                    "type": "boolean",
                    "example": false
                },
                "PendingTransfer": {
                    "type": "boolean",
                    "example": false
                },
                "PendingUpdate": {
                    "type": "boolean",
                    "example": false
                },
                "PostalInfo": {
                    "description": "1 required, 2 maximum. I prefer the approach to have an array of two optional items over a map because it makes manipulating (updating) easier",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.ContactPostalInfo"
                    }
                },
                "ServerDeleteProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ServerTransferProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ServerUpdateProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "UpDate": {
                    "type": "string",
                    "example": "2023-04-03T22:00:00.0Z"
                },
                "UpRr": {
                    "type": "string",
                    "example": "sh8013"
                },
                "Voice": {
                    "type": "string",
                    "example": "+1.9567345623"
                }
            }
        },
        "entities.ContactDisclose": {
            "type": "object",
            "properties": {
                "DiscloseAddrInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseAddrLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseEmail": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseFax": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseNameInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseNameLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseOrgInt": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseOrgLoc": {
                    "type": "boolean",
                    "example": false
                },
                "DiscloseVoice": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "entities.ContactPostalInfo": {
            "type": "object",
            "properties": {
                "Type": {
                    "type": "string",
                    "x-order": "0",
                    "example": "loc"
                },
                "Name": {
                    "type": "string",
                    "x-order": "1",
                    "example": "Gerardo Aguantis"
                },
                "Org": {
                    "type": "string",
                    "x-order": "2",
                    "example": "Agua Britanica"
                },
                "Address": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Address"
                        }
                    ],
                    "x-order": "3"
                }
            }
        },
        "entities.ContactStatus": {
            "type": "object",
            "properties": {
                "ClientDeleteProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ClientTransferProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ClientUpdatProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "Linked": {
                    "type": "boolean",
                    "example": true
                },
                "OK": {
                    "type": "boolean",
                    "example": true
                },
                "PendingCreate": {
                    "type": "boolean",
                    "example": false
                },
                "PendingDelete": {
                    "type": "boolean",
                    "example": false
                },
                "PendingTransfer": {
                    "type": "boolean",
                    "example": false
                },
                "PendingUpdate": {
                    "type": "boolean",
                    "example": false
                },
                "ServerDeleteProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ServerTransferProhibited": {
                    "type": "boolean",
                    "example": false
                },
                "ServerUpdateProhibited": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "entities.IANARegistrar": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "gurID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rdapURL": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entities.IANARegistrarStatus"
                }
            }
        },
        "entities.IANARegistrarStatus": {
            "type": "string",
            "enum": [
                "Accredited",
                "Reserved",
                "Terminated"
            ],
            "x-enum-varnames": [
                "IANARegistrarStatusAccredited",
                "IANARegistrarStatusReserved",
                "IANARegistrarStatusTerminated"
            ]
        },
        "entities.NNDN": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp of NNDN object creation. Example: 2024-01-19T15:04:05Z",
                    "type": "string"
                },
                "name": {
                    "description": "Unique identifier for the NNDN object.\nThe ASCII compatible (Punycode) representation of the NNDN.\nFor an IDN variant \"例子.com\", this would be \"xn--fsq.com\".",
                    "type": "string"
                },
                "nameState": {
                    "description": "Indicates the state of the NNDN: 'blocked', 'withheld', or 'mirrored'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.NNDNState"
                        }
                    ]
                },
                "tldname": {
                    "description": "Identifier for the Top-Level Domain (TLD) associated with this NNDN.\nFor \"例子.com\", the TLDName might correspond to the \".com\"",
                    "type": "string"
                },
                "uname": {
                    "description": "The Unicode representation of the NNDN.\nFor the IDN variant \"xn--fsq.com\", this would be \"例子.com\".",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Timestamp of the last update to the NNDN object. Example: 2024-01-20T15:04:05Z",
                    "type": "string"
                }
            }
        },
        "entities.NNDNState": {
            "type": "string",
            "enum": [
                "blocked",
                "withheld",
                "mirrored"
            ],
            "x-enum-comments": {
                "NNDNStateBlocked": "Indicates the NNDN is not available for registration.",
                "NNDNStateMirrored": "A mirrored IDN variant of a domain name.",
                "NNDNStateWithheld": "Potentially a future registrable domain."
            },
            "x-enum-varnames": [
                "NNDNStateBlocked",
                "NNDNStateWithheld",
                "NNDNStateMirrored"
            ]
        },
        "entities.Registrar": {
            "type": "object",
            "properties": {
                "ClID": {
                    "description": "ClID is the client identifier of the registrar and is used throughout the Registry to identify the sponsoring registrar.",
                    "type": "string",
                    "x-order:0": true,
                    "example": "my-regisrar-007"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fax": {
                    "type": "string"
                },
                "gurID": {
                    "description": "The IANA Registrar ID for the registrar. This is the ID that is attributed in the IANA Registrar ID Registry if the Registrar is accredited by ICANN. Ref: https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml",
                    "type": "integer"
                },
                "name": {
                    "description": "A human-readable name for the registrar. Must match the Legal entity name. For ICANN Accredite registrars, must match the entity registered with ICANN for the corresponding GurID.",
                    "type": "string"
                },
                "nickName": {
                    "description": "A Nickname for the regisrar, can be used if the registrar has multiple brands or it is know in the industry as a different name than their legal entity.",
                    "type": "string"
                },
                "postalInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.RegistrarPostalInfo"
                    }
                },
                "rdapBaseURL": {
                    "type": "string"
                },
                "status": {
                    "description": "The status of the registrar. It can be one of the following: \"ok\", \"readonly\", \"terminated\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.RegistrarStatus"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "voice": {
                    "type": "string"
                },
                "whoisInfo": {
                    "$ref": "#/definitions/entities.WhoisInfo"
                }
            }
        },
        "entities.RegistrarPostalInfo": {
            "type": "object",
            "properties": {
                "Type": {
                    "type": "string",
                    "x-order": "0",
                    "example": "loc"
                },
                "Address": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entities.Address"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "entities.RegistrarStatus": {
            "type": "string",
            "enum": [
                "terminated",
                "ok",
                "readonly"
            ],
            "x-enum-varnames": [
                "RegistrarStatusTerminated",
                "RegistrarStatusOK",
                "RegistrarStatusReadonly"
            ]
        },
        "entities.Spec5Label": {
            "type": "object",
            "properties": {
                "Label": {
                    "type": "string",
                    "x-order": "0"
                },
                "Type": {
                    "type": "string",
                    "x-order": "1"
                },
                "CreatedAt": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        },
        "entities.TLD": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "Name": {
                    "description": "Name is the ASCII name of the TLD (aka A-label)",
                    "type": "string"
                },
                "Type": {
                    "description": "Type is the type of TLD (generic, country-code, second-level)",
                    "type": "string"
                },
                "UName": {
                    "description": "UName is the unicode name of the TLD (aka U-label)",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                }
            }
        },
        "entities.WhoisInfo": {
            "type": "object",
            "properties": {
                "Name": {
                    "description": "name of the registrar WHOIS server listening on TCP port 43",
                    "type": "string",
                    "x-order": "0",
                    "example": "whois.apex.domains"
                },
                "URL": {
                    "description": "URL of the registrar WHOIS server listening on TCP port 80/443",
                    "type": "string",
                    "x-order": "1",
                    "example": "https://apex.domains/whois"
                }
            }
        },
        "request.CreateNNDNRequest": {
            "type": "object",
            "required": [
                "Name"
            ],
            "properties": {
                "Name": {
                    "type": "string"
                }
            }
        },
        "request.CreateRegistrarFromGurIDRequest": {
            "type": "object",
            "required": [
                "Email"
            ],
            "properties": {
                "Email": {
                    "type": "string"
                }
            }
        },
        "response.ListItemResult": {
            "type": "object",
            "properties": {
                "Data": {},
                "Meta": {
                    "$ref": "#/definitions/response.PaginationMetaData"
                }
            }
        },
        "response.PaginationMetaData": {
            "type": "object",
            "properties": {
                "NextLink": {
                    "type": "string"
                },
                "PageCursor": {
                    "type": "string"
                },
                "PageSize": {
                    "type": "integer"
                }
            }
        },
        "rest.SyncResult": {
            "type": "object",
            "properties": {
                "Message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.5.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "APEX RegistryOS",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
