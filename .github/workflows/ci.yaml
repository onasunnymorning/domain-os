name: CI

on:
  pull_request:
    branches:    
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup and Cache Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
        id: go

      - name: Start test Database server
        run: |
          docker run --rm -d -e POSTGRES_HOST_AUTH_METHOD=scram-sha-256 -e POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 -e POSTGRES_PASSWORD=unittest -e POSTGRES_USER=postgres -p 5432:5432 postgres:16.1 -c ssl=on -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
        id: testdb

      - name: Run Tests
        run: |
          go test -v ./...

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Event Consumer
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/cli/messaging/sub/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: geapex/event-consumer:${{ github.sha }}
          cache-from: type=registry,ref=geapex/event-consumer:buildcache
          cache-to: type=registry,ref=geapex/event-consumer:buildcache,mode=max 
      - name: Build and push EPP Client API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/api/epp-client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: geapex/epp-client-api:${{ github.sha }}
          cache-from: type=registry,ref=geapex/epp-client-api:buildcache
          cache-to: type=registry,ref=geapex/epp-client-api:buildcache,mode=max
      - name: Build and push AdminAPI
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: geapex/domain-os:${{ github.sha }}
          cache-from: type=registry,ref=geapex/domain-os:buildcache
          cache-to: type=registry,ref=geapex/domain-os:buildcache,mode=max

  integrationtests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Run Integration Tests
        run: docker compose -f docker-compose-ci.yml up --abort-on-container-exit --exit-code-from test
        env:
          OPENEXCHANGERATES_APP_ID: ${{ secrets.OPENEXCHANGERATES_APP_ID }}
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_COLLECTION_ID: ${{ vars.POSTMAN_COLLECTION_ID }}
          POSTMAN_ENVIRONMENT_ID: ${{ vars.POSTMAN_ENVIRONMENT_ID }}
          DB_HOST: domain-os-db-1
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASS: unittest
          DB_NAME: integrationtests
          API_PORT: 8080
          API_HOST: domain-os-admin-api-1
          BRANCH: ${{ github.sha }}
          GIN_MODE: debug
          KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
          KAFKA_SASL_USERNAME: ${{ secrets.KAFKA_SASL_USERNAME }}
          KAFKA_SASL_PASSWORD: ${{ secrets.KAFKA_SASL_PASSWORD }}
          KAFKA_SASL_MECHANISM: ${{ secrets.KAFKA_SASL_MECHANISM }}
          KAFKA_SECURITY_PROTOCOL: ${{ secrets.KAFKA_SECURITY_PROTOCOL }}
          KAFKA_TOPIC: ${{ secrets.KAFKA_TOPIC }}
          KAFKA_GROUP: ${{ secrets.KAFKA_GROUP }}

      - name: Docker Scout
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-password: ${{ secrets.DOCKERHUB_TOKEN }}
          command: compare
          image: geapex/epp-client-api:${{ github.sha }}
          to: geapex/epp-client-api:latest
          # image: ${{ steps.meta.outputs.tags }}
          # to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMPARE_TAG }}
          ignore-unchanged: true
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.PAT_TOKEN_DOCKER_SCOUT }} # to be able to write the commen


  retag:
    name: Retag images
    runs-on: ubuntu-latest
    needs: integrationtests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Retag Admin API
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: geapex/domain-os:latest
          cache-from: type=registry,ref=geapex/domain-os:buildcache
          cache-to: type=registry,ref=geapex/domain-os:buildcache,mode=max
      - name: Retag EPP Client API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/api/epp-client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: geapex/epp-client-api:latest
          cache-from: type=registry,ref=geapex/epp-client-api:buildcache
          cache-to: type=registry,ref=geapex/epp-client-api:buildcache,mode=max