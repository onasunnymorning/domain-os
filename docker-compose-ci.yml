services:
# Database container
  db:
    image: postgres:16.1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: >
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
    # expose:
    #   - 5432
    ports:
      - 5432:5432
      - 55432:55432
    networks:
      - dos
    volumes: 
      - db:/var/lib/postgresql/data 

# RabbitMQ Broker container
  msg-broker:
    image: rabbitmq:3.13
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl node_health_check"]
      interval: 15s
      retries: 3
    ports:
      - 5552:5552
      - 5672:5672
      - 15672:15672
    networks:
      - dos
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_stream
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/enabled_plugins
    volumes:
      - ./.rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins

# Event Stream Echo service
  msg-stream-echo:
    image: "geapex/streamclient:${BRANCH}"
    restart: always
    depends_on:
      msg-broker:
        condition: service_healthy
    environment:
      - RMQ_PASS=${RMQ_PASS}
      - RMQ_USER=${RMQ_USER}
      - RMQ_HOST=msg-broker
      - RMQ_PORT=${RMQ_PORT}
      - EVENT_STREAM_TOPIC=${EVENT_STREAM_TOPIC}
    networks:
      - dos

# Core API container
  admin-api:
    image: "geapex/domain-os:${BRANCH}"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ping || exit"]
      interval: 3s
      retries: 5
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      msg-broker:
        condition: service_healthy
    environment:
      - GIN_MODE=${GIN_MODE}
      - AUTO_MIGRATE=${AUTO_MIGRATE}
      - NEW_RELIC_ENABLED=${NEW_RELIC_ENABLED}
      - NEWRELIC_LICENCE_KEY=${NEWRELIC_LICENCE_KEY}
      - NEWRELIC_USER_KEY=${NEWRELIC_USER_KEY}
      - OPENEXCHANGERATES_APP_ID=${OPENEXCHANGERATES_APP_ID}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - API_PORT=${API_PORT}
      - API_HOST=${API_HOST}
      - API_VERSION=${API_VERSION}
      - RMQ_HOST=${RMQ_HOST}
      - RMQ_PORT=${RMQ_PORT}
      - RMQ_USER=${RMQ_USER}
      - RMQ_PASS=${RMQ_PASS}
      - EVENT_STREAM_TOPIC=${EVENT_STREAM_TOPIC}
      - EVENT_STREAM_ENABLED=${EVENT_STREAM_ENABLED}

    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - dos
# TEST container from wich we will be running integration tests based on a postman collection
  test:
    image: postman/newman
    command:
      run "https://api.getpostman.com/collections/"${POSTMAN_COLLECTION_ID}"?apikey="${POSTMAN_API_KEY} -e "https://api.getpostman.com/environments/"${POSTMAN_ENVIRONMENT_ID}"?apikey="${POSTMAN_API_KEY} 
    environment:
      - apikey=${POSTMAN_API_KEY}
      - collection=${POSTMAN_COLLECTION_ID}
      - environment=${POSTMAN_ENVIRONMENT_ID}
    depends_on:
      admin-api:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - dos  

networks:
  dos:
    driver: bridge

volumes:
  db:
    driver: local